[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "open-encroachment"
dynamic = ["version"]
description = "Multi-sensor threat detection and response coordination system"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "OpenEncroachment Team" }]
license = { file = "LICENSE" }
keywords = ["threat-detection", "geofencing", "nlp", "ml", "incident-management"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]

# Core runtime dependencies
# Heavy geo deps (like geopandas/gdal) are intentionally avoided; shapely is optional via the "geo" extra.
dependencies = [
  "numpy>=1.24",
  "pandas>=2.0",
  "scikit-learn>=1.3",
  "joblib>=1.3",
  "requests>=2.31",
  "PyYAML>=6.0",
  "Pillow>=10.0",
  "openai>=1.40.0",
  "httpx>=0.27.0",
  "pydantic>=2.5.0",
  "tenacity>=8.2.3",
  "jsonschema>=4.22.0",
  "rich>=13.7.0",
  "typer>=0.12.0"
]

[project.optional-dependencies]
geo = ["shapely>=2.0.0"]
dev = [
  "pytest>=8.2.0",
  "pytest-cov>=4.1.0",
  "mypy>=1.11.0",
  "ruff>=0.6.0",
  "black>=24.8.0",
  "tox>=4.16.0",
  "tox-uv>=1.9.0",
]

[project.scripts]
open-encroachment = "open_encroachment.cli:main"
open-encroachment-agent = "open_encroachment.agents.cli:main"

[tool.hatch.version]
path = "src/open_encroachment/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/open_encroachment"]

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
  "mypy",
  "ruff",
  "black",
]
features = []

[tool.hatch.envs.dev]
features = ["dev"]
[tool.hatch.envs.dev.scripts]
test = "pytest -q"
lint = "ruff check ."
type = "mypy --strict open_encroachment"
format = "black . && ruff check . --fix"
run-pipeline = "open-encroachment run-pipeline --config config/settings.yaml --sample-data"
serve-datasette = "datasette -c datasette.yaml"
agent = "open-encroachment agent --help"

[tool.ruff]
line-length = 100
target-version = "py310"
select = ["E", "F", "I", "UP", "B", "SIM", "A", "C4", "TID", "Q", "RUF"]
ignore = ["E501"]
fix = true
exclude = [
  "build",
  "dist",
  ".venv",
]

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"

[tool.black]
line-length = 100
target-version = ["py310"]
exclude = "/(build|dist|\\.venv)/"

[tool.mypy]
python_version = "3.10"
mypy_path = "src"
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_optional = true
strict_optional = true
check_untyped_defs = true
show_error_codes = true
exclude = "(build|dist|\\.venv)"

[tool.pytest.ini_options]
addopts = "-ra -q --cov=open_encroachment --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]

